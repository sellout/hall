let Combine = ../Combine/package.dhall

let Common = ../Common/package.dhall

let DefaultType = ./DefaultType

let extractCommon = ./extractCommon

in  λ(a : Type) →
    λ(combine : { buildable : Combine.Type Bool, main : Combine.Type Text }) →
    λ(left : DefaultType a) →
    λ(right : DefaultType a) →
          Common.combine
            a
            combine.{ buildable }
            (extractCommon a left)
            (extractCommon a right)
        ∧ { main = Combine.optional Text combine.main left.main right.main
          , other-modules = left.other-modules # right.other-modules
          , generated-other-modules =
              left.generated-other-modules # right.generated-other-modules
          }
      : DefaultType a
