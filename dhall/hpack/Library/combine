let Combine = ../Combine/package.dhall

let Common = ../Common/package.dhall

let DefaultType = ./DefaultType

let extractCommon = ./extractCommon

in  λ(a : Type) →
    λ ( combine
      : { buildable : Combine.Type Bool, exposed : Bool → Bool → Bool }
      ) →
    λ(left : DefaultType a) →
    λ(right : DefaultType a) →
          Common.combine
            a
            combine.{ buildable }
            (extractCommon a left)
            (extractCommon a right)
        ∧ { exposed = combine.exposed left.exposed right.exposed
          , exposed-modules = left.other-modules # right.other-modules
          , generated-exposed-modules = left.other-modules # right.other-modules
          , other-modules = left.other-modules # right.other-modules
          , generated-other-modules = left.other-modules # right.other-modules
          , reexported-modules = left.other-modules # right.other-modules
          , signatures = left.other-modules # right.other-modules
          }
      : DefaultType a
